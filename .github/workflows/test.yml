name: Test
on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main
      - master

env:
  PROJECT_ID: 7f55831d77c642739bc17733ab0af138 #github actions project id (under 'Permit.io Tests' workspace)
  ENV_NAME: python-sdk-ci

jobs:
  pytest:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pydantic-version: ['pydantic<2.0.0', 'pydantic>=2.0.0']
    name: pytest (Pydantic ${{ matrix.pydantic-version }})
    services:
      pdp:
        image: permitio/pdp-v2:latest
        ports:
          - 7766:7000
        env:
          PDP_API_KEY: ${{ secrets.PROJECT_API_KEY }}
          PDP_DEBUG: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Python setup
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.8'

      - name: Creation env ${{ env.ENV_NAME }}-${{ github.run_id }}-${{ matrix.pydantic-version }}
        id: create_env
        run: |
          ENV_KEY="${{ env.ENV_NAME }}-${{ github.run_id }}-${{ matrix.pydantic-version == 'pydantic<2.0.0' && 'v1' || 'v2' }}"
          echo "ENV_KEY=$ENV_KEY" >> $GITHUB_ENV

          response=$(curl -X POST \
            https://api.permit.io/v2/projects/${{ env.PROJECT_ID }}/envs \
            -H 'Authorization: Bearer ${{ secrets.PROJECT_API_KEY }}' \
            -H 'Content-Type: application/json' \
            -d '{
            "key": "'"$ENV_KEY"'",
            "name": "'"$ENV_KEY"'"
          }')

          # Extract the new env id
          echo "ENV_ID=$(echo "$response" | jq -r '.id')" >> $GITHUB_ENV

          echo "New env ID: $ENV_ID with key: $ENV_KEY"

      - name: Fetch API_KEY of ${{ env.ENV_KEY }}
        run: |
          response=$(curl -X GET \
            https://api.permit.io/v2/api-key/${{ env.PROJECT_ID }}/${{ env.ENV_ID }} \
            -H 'Authorization: Bearer ${{ secrets.PROJECT_API_KEY }}')

          # Extract the secret from the response which is the API_KEY of the new env
          echo "ENV_API_KEY=$(echo "$response" | jq -r '.secret')" >> $GITHUB_ENV

          echo "New env api key: $ENV_API_KEY"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          # Pin pydantic version according to matrix
          pip install "${{ matrix.pydantic-version }}"
          # Explicitly install email-validator which is required for Pydantic email validation
          pip install email-validator
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt --no-deps; fi

      - name: Show installed packages
        run: pip list

      - name: Test with pytest
        env:
          PDP_URL: http://localhost:7766
          API_TIER: prod
          ORG_PDP_API_KEY: ${{ env.ENV_API_KEY }}
          PROJECT_PDP_API_KEY: ${{ env.ENV_API_KEY }}
          PDP_API_KEY: ${{ env.ENV_API_KEY }}
        run: |
          pytest -s --cache-clear tests/

      - name: Delete env ${{ env.ENV_KEY }}
        if: always()
        run: |
          curl -X DELETE \
            https://api.permit.io/v2/projects/${{ env.PROJECT_ID }}/envs/${{ env.ENV_ID }} \
            -H 'Authorization: Bearer ${{ secrets.PROJECT_API_KEY }}'
